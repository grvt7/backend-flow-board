{
  "compilerOptions": {
    "module": "ES6",                // Use ES6 modules, since this is a modern and standard module system supported by most environments. It's widely used in Node.js (14+).
    "target": "ES6",                // ES6 is ideal for modern Node.js or browser environments, providing support for async/await, arrow functions, etc.
    "moduleResolution": "Node",     // Use Node.js-style module resolution. This is important for resolving modules like packages in `node_modules` and is the default in Node.js.
    "baseUrl": "src",               // Base directory for relative module imports. Helps simplify imports by using paths like `import { User } from 'models/User'` instead of relative paths.
    "outDir": "dist",               // Directory to output compiled files. `dist` is a common convention for production-ready builds.
    "sourceMap": true,              // Enable source maps to help with debugging by mapping TypeScript code to the compiled JavaScript.
    "noImplicitAny": true,          // Helps catch potential bugs by ensuring that you don’t implicitly use `any` type, improving type safety.
    "strict": true,                 // Enable all strict type-checking options, which helps catch more errors at compile time (optional but highly recommended).
    "esModuleInterop": true,        // This ensures compatibility between CommonJS modules and ES6 imports, enabling you to use both styles seamlessly (e.g., `require()` and `import`).
    "skipLibCheck": true            // Skips type checking of declaration files (`.d.ts`), improving build performance, especially in larger projects. If you're confident about your dependencies, this can be beneficial.
  },
  "include": [
    "src/**/*"                      // Include all TypeScript and JavaScript files in the `src` directory (useful since we allow JS files in the project).
  ],
  "exclude": [
    "node_modules"                  // Exclude `node_modules` directory from compilation, as you typically don’t need to compile third-party code.
  ]
}
